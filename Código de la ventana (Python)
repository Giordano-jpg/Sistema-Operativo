import tkinter as tk
from PIL import Image, ImageTk
import os
from tkinter import messagebox
import time
from datetime import datetime


def mostrar_texto():
    global texto
    texto = canvas_inicio.create_text(canvas_inicio.winfo_width() / 2, canvas_inicio.winfo_height() / 2, text="Nombre", fill="#000000", font=("Arial", 20, "bold"))
    fade_in(texto)

def fade_in(item, alpha=0):
    if alpha < 255:
        alpha += 15
        color = '#%02x%02x%02x' % (alpha, alpha, alpha)
        canvas_inicio.itemconfig(item, fill=color)
        ventana.after(60, fade_in, item, alpha)
    else:
        ventana.after(900, lambda: fade_out(item))

def fade_out(item, alpha=255):
    if alpha > 0:
        alpha -= 15
        color = '#%02x%02x%02x' % (alpha, alpha, alpha)
        canvas_inicio.itemconfig(item, fill=color)
        ventana.after(60, fade_out, item, alpha)
    else:
        canvas_inicio.after(500, canvas_inicio.destroy())


def boton_clicado():
    print("Botón clicado")


def cerrar_ventana():
    fondo_label.destroy()
    boton1.destroy()
    boton2.destroy()
    boton3.destroy()
    boton4.destroy()
    label_fecha_hora.destroy()
    bandera_label.destroy()
    etiqueta_bateria.destroy()
    canvas.destroy()
    label_texto = tk.Label(ventana, text="Apagando", font=("Arial", 24), bg="black", fg="white")
    pos_x = ancho_pantalla // 2
    pos_y = alto_pantalla // 2
    label_texto.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
    ventana.after(2500, ventana.destroy)


def actualizar_fecha_y_hora():
    # Verificar si la etiqueta aún existe
    if label_fecha_hora.winfo_exists():
        now = datetime.now()
        fecha_hora_actual = now.strftime("%Y-%m-%d %H:%M:%S")
        label_fecha_hora.config(text=fecha_hora_actual)
        ventana.after(1000, actualizar_fecha_y_hora)


def abrir_ventana_carpeta(numero):
    # Ruta de la carpeta correspondiente
    carpeta_dir = f"Carpeta_{numero}"

    # Crear la ventana de la carpeta
    ventana_carpeta = tk.Toplevel()
    ventana_carpeta.geometry("400x300")
    ventana_carpeta.title(f"Carpeta {numero}")

    # Contenido de la ventana de la carpeta
    label_carpeta = tk.Label(ventana_carpeta, text=f"Contenido de la carpeta {numero}")
    label_carpeta.pack()

    # Textbox para mostrar y editar contenido del archivo de texto
    text_box = tk.Text(ventana_carpeta, height=10, width=50)
    text_box.pack()

    # Botón para guardar el contenido en un archivo de texto
    def guardar_contenido():
        contenido = text_box.get("1.0", tk.END)
        # Construir la ruta del archivo utilizando os.path.join
        archivo_path = os.path.join(carpeta_dir, f"carpeta{numero}_archivo.txt")
        with open(archivo_path, "w") as archivo:
            archivo.write(contenido)
        messagebox.showinfo("Información", "Contenido guardado en el archivo.")

    boton_guardar = tk.Button(ventana_carpeta, text="Guardar", command=guardar_contenido)
    boton_guardar.pack()

    # Función para listar y mostrar archivos en la carpeta
    def mostrar_contenido_carpeta():
        # Obtener la ruta completa de la carpeta correspondiente
        carpeta_completa = os.path.join(f"Carpeta_{numero}")
        archivos_en_carpeta = os.listdir(carpeta_completa)
        messagebox.showinfo("Archivos en la carpeta", "\n".join(archivos_en_carpeta))

    boton_ver_contenido = tk.Button(ventana_carpeta, text="Ver Contenido de la Carpeta", command=mostrar_contenido_carpeta)
    boton_ver_contenido.pack()

    # Botón para borrar un archivo
    def borrar_archivo():
        # Construir la ruta del archivo utilizando os.path.join
        archivo_path = os.path.join(carpeta_dir, f"carpeta{numero}_archivo.txt")
        if os.path.exists(archivo_path):
            os.remove(archivo_path)
            messagebox.showinfo("Información", "Archivo borrado.")
        else:
            messagebox.showerror("Error", "El archivo no existe.")

    boton_borrar_archivo = tk.Button(ventana_carpeta, text="Borrar Archivo", command=borrar_archivo)
    boton_borrar_archivo.pack()


def abrir_explorador_de_archivos():
    # Crear la ventana secundaria
    ventana2 = tk.Toplevel()
    ventana2.geometry("420x300+100+100")
    ventana2.title("Explorador de archivos")

    # Cargar y mostrar las imágenes de carpeta en horizontal con texto debajo
    imagen_carpeta = Image.open("carpeta.png")
    imagen_carpeta = imagen_carpeta.resize((100, 100), Image.BICUBIC)
    imagen_carpeta = ImageTk.PhotoImage(imagen_carpeta)

    for i in range(3):
        # Crear un botón para cada imagen de carpeta
        boton_carpeta = tk.Button(ventana2, image=imagen_carpeta, command=lambda num=i + 1: abrir_ventana_carpeta(num))
        boton_carpeta.grid(row=0, column=i, padx=10, pady=10)

        # Agregar texto debajo de cada botón
        etiqueta_texto = tk.Label(ventana2, text=f"Carpeta {i + 1}")
        etiqueta_texto.grid(row=1, column=i)

    ventana2.mainloop()


ventana = tk.Tk()
ventana.attributes("-fullscreen", True)

imagen_fondo = Image.open("fernando-alonso.png")
imagen_fondo = imagen_fondo.resize((ventana.winfo_screenwidth(), ventana.winfo_screenheight()), Image.BICUBIC)
imagen_fondo = ImageTk.PhotoImage(imagen_fondo)

fondo_label = tk.Label(ventana, image=imagen_fondo)
fondo_label.place(x=0, y=0, relwidth=1, relheight=1)

ventana.configure(bg="black")

ancho_pantalla = ventana.winfo_screenwidth()
alto_pantalla = ventana.winfo_screenheight()

# Cambiar el estilo de los botones
estilo_boton = {"font": ("Helvetica", 12, "bold"), "bg": "#FF0000", "fg": "white", "relief": "raised", "bd": 2}

imagen_original = Image.open("nano.jpg")
imagen_original = imagen_original.resize((100, 100), Image.BICUBIC)
imagen_carpeta = Image.open("icono_carpeta.png")
imagen_carpeta = imagen_carpeta.resize((80, 80), Image.BICUBIC)
imagen_original2 = Image.open("cabeza_prueba.jpg")
imagen_original2 = imagen_original2.resize((100, 100), Image.BICUBIC)

imagen_boton = ImageTk.PhotoImage(imagen_original)
imagen_carpeta = ImageTk.PhotoImage(imagen_carpeta)
imagen_boton_serpiente = ImageTk.PhotoImage(imagen_original2)

# Crear botones con el estilo personalizado
boton1 = tk.Button(ventana, image=imagen_boton, command=boton_clicado, **estilo_boton)
boton1.place(x=ancho_pantalla // 80, y=alto_pantalla // 50, width=100, height=100)

boton2 = tk.Button(ventana, image=imagen_boton_serpiente, command=boton_clicado, **estilo_boton)
boton2.place(x=ancho_pantalla // 9, y=alto_pantalla // 50, width=100, height=100)

boton3 = tk.Button(ventana, image=imagen_carpeta, command=abrir_explorador_de_archivos, **estilo_boton)
boton3.place(x=ancho_pantalla // 80, y=alto_pantalla // 5, width=100, height=100)

boton4 = tk.Button(ventana, text="Cerrar", command=cerrar_ventana, **estilo_boton)
boton4.place(x=ancho_pantalla // 9, y=alto_pantalla // 5, width=100, height=100)

canvas = tk.Canvas(ventana, bg="white")
canvas.place(x=ancho_pantalla // 2000, y=alto_pantalla // 1.08, width=ancho_pantalla, height=alto_pantalla // 13)

imagen_original_bateria = Image.open("bateria-llena.png")
ancho_original_bateria, alto_original_bateria = imagen_original_bateria.size

ancho_deseado_bateria = 50
escala_bateria = ancho_deseado_bateria / ancho_original_bateria
nuevo_ancho_bateria = int(ancho_original_bateria * escala_bateria)
nuevo_alto_bateria = int(alto_original_bateria * escala_bateria)

imagen_original_bateria.thumbnail((nuevo_ancho_bateria, nuevo_alto_bateria))
imagen_bateria = ImageTk.PhotoImage(imagen_original_bateria)

etiqueta_bateria = tk.Label(ventana, image=imagen_bateria)
etiqueta_bateria.pack()
etiqueta_bateria.place(relx=1.0, rely=1.0, anchor='se')

# Cargar imagen de la bandera de España
imagen_bandera_espana = Image.open("bandera_espana.jpg")
# Escalar la imagen para que tenga la misma altura que la barra blanca
imagen_bandera_espana = imagen_bandera_espana.resize((70, alto_pantalla // 14), Image.BICUBIC)

# Convertir la imagen a PhotoImage
imagen_bandera_espana_tk = ImageTk.PhotoImage(imagen_bandera_espana)

# Creamos un widget de etiqueta para mostrar la imagen de la bandera de España
bandera_label = tk.Label(ventana, image=imagen_bandera_espana_tk)
bandera_label.place(relx=0, rely=1.0, anchor='sw')

label_fecha_hora = tk.Label(ventana, font=("Arial", 18), bg="white")
label_fecha_hora.place(relx=0.95, rely=0.99, anchor='se')
actualizar_fecha_y_hora()

canvas_inicio = tk.Canvas(ventana, bg = "black", width = ancho_pantalla, height = alto_pantalla, highlightthickness = 0)
canvas_inicio.pack()
ventana.after(1000, mostrar_texto)
ventana.mainloop()
